//
//  StyleKit.swift
//  MetroMap
//
//  Created by Den Haritonenko on 20.11.24.
//  Copyright Â© 2024 (null). All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class StyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let metroBlue: UIColor = UIColor(red: 0.214, green: 0.175, blue: 0.530, alpha: 1.000)
        static let metroRed: UIColor = UIColor(red: 0.888, green: 0.119, blue: 0.144, alpha: 1.000)
        static let metroGreen: UIColor = UIColor(red: 0.000, green: 0.593, blue: 0.279, alpha: 1.000)
        static let metroGrey: UIColor = UIColor(red: 0.839, green: 0.856, blue: 0.871, alpha: 1.000)
    }

    //// Colors

    @objc dynamic public class var metroBlue: UIColor { return Cache.metroBlue }
    @objc dynamic public class var metroRed: UIColor { return Cache.metroRed }
    @objc dynamic public class var metroGreen: UIColor { return Cache.metroGreen }
    @objc dynamic public class var metroGrey: UIColor { return Cache.metroGrey }
    
//    static var bezier2Path = UIBezierPath()

    //// Drawing Methods

    @objc dynamic public class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 635, height: 619), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 635, height: 619), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 635, y: resizedFrame.height / 619)


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 625, y: 15))
        bezier2Path.addLine(to: CGPoint(x: 35, y: 605))
        StyleKit.metroBlue.setStroke()
        bezier2Path.lineWidth = 3.5
        bezier2Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 70))
        bezierPath.addLine(to: CGPoint(x: 530, y: 590))
        StyleKit.metroRed.setStroke()
        bezierPath.lineWidth = 3.5
        bezierPath.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 5, y: 75))
        bezier3Path.addLine(to: CGPoint(x: 15, y: 65))
        StyleKit.metroRed.setStroke()
        bezier3Path.lineWidth = 3.5
        bezier3Path.stroke()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 49, y: 111))
        bezier5Path.addLine(to: CGPoint(x: 55, y: 105))
        StyleKit.metroRed.setStroke()
        bezier5Path.lineWidth = 3.5
        bezier5Path.stroke()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 21, y: 54, width: 108, height: 21)
        let text2TextContent = "Kamennaja Gorka"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text2Style,
        ] as [NSAttributedString.Key: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()


        //// Text 3 Drawing
        let text3Rect = CGRect(x: 61, y: 94, width: 108, height: 21)
        let text3TextContent = "Kuncawshchyna"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .left
        let text3FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text3Style,
        ] as [NSAttributedString.Key: Any]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        text3TextContent.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()


        //// Text 4 Drawing
        let text4Rect = CGRect(x: 100, y: 134, width: 108, height: 21)
        let text4TextContent = "Spartywnaja"
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .left
        let text4FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text4Style,
        ] as [NSAttributedString.Key: Any]

        let text4TextHeight: CGFloat = text4TextContent.boundingRect(with: CGSize(width: text4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text4Rect)
        text4TextContent.draw(in: CGRect(x: text4Rect.minX, y: text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, width: text4Rect.width, height: text4TextHeight), withAttributes: text4FontAttributes)
        context.restoreGState()


        //// Text 5 Drawing
        let text5Rect = CGRect(x: 141, y: 174, width: 108, height: 21)
        let text5TextContent = "Pushkinskaya"
        let text5Style = NSMutableParagraphStyle()
        text5Style.alignment = .left
        let text5FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text5Style,
        ] as [NSAttributedString.Key: Any]

        let text5TextHeight: CGFloat = text5TextContent.boundingRect(with: CGSize(width: text5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text5Rect)
        text5TextContent.draw(in: CGRect(x: text5Rect.minX, y: text5Rect.minY + (text5Rect.height - text5TextHeight) / 2, width: text5Rect.width, height: text5TextHeight), withAttributes: text5FontAttributes)
        context.restoreGState()


        //// Text 9 Drawing
        let text9Rect = CGRect(x: 181, y: 214, width: 108, height: 21)
        let text9TextContent = "Maladziozhnaja"
        let text9Style = NSMutableParagraphStyle()
        text9Style.alignment = .left
        let text9FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text9Style,
        ] as [NSAttributedString.Key: Any]

        let text9TextHeight: CGFloat = text9TextContent.boundingRect(with: CGSize(width: text9Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text9FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text9Rect)
        text9TextContent.draw(in: CGRect(x: text9Rect.minX, y: text9Rect.minY + (text9Rect.height - text9TextHeight) / 2, width: text9Rect.width, height: text9TextHeight), withAttributes: text9FontAttributes)
        context.restoreGState()


        //// Text 8 Drawing
        let text8Rect = CGRect(x: 221, y: 254, width: 108, height: 21)
        let text8TextContent = "Frunzenskaya"
        let text8Style = NSMutableParagraphStyle()
        text8Style.alignment = .left
        let text8FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text8Style,
        ] as [NSAttributedString.Key: Any]

        let text8TextHeight: CGFloat = text8TextContent.boundingRect(with: CGSize(width: text8Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text8FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text8Rect)
        text8TextContent.draw(in: CGRect(x: text8Rect.minX, y: text8Rect.minY + (text8Rect.height - text8TextHeight) / 2, width: text8Rect.width, height: text8TextHeight), withAttributes: text8FontAttributes)
        context.restoreGState()


        //// Text 10 Drawing
        let text10Rect = CGRect(x: 261, y: 294, width: 108, height: 21)
        let text10TextContent = "Niamiha"
        let text10Style = NSMutableParagraphStyle()
        text10Style.alignment = .left
        let text10FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.label,
            .paragraphStyle: text10Style,
        ] as [NSAttributedString.Key: Any]

        let text10TextHeight: CGFloat = text10TextContent.boundingRect(with: CGSize(width: text10Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text10FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text10Rect)
        text10TextContent.draw(in: CGRect(x: text10Rect.minX, y: text10Rect.minY + (text10Rect.height - text10TextHeight) / 2, width: text10Rect.width, height: text10TextHeight), withAttributes: text10FontAttributes)
        context.restoreGState()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 89, y: 151))
        bezier8Path.addLine(to: CGPoint(x: 95, y: 145))
        StyleKit.metroRed.setStroke()
        bezier8Path.lineWidth = 3.5
        bezier8Path.stroke()


        //// Bezier 12 Drawing
        let bezier12Path = UIBezierPath()
        bezier12Path.move(to: CGPoint(x: 129, y: 191))
        bezier12Path.addLine(to: CGPoint(x: 135, y: 185))
        StyleKit.metroRed.setStroke()
        bezier12Path.lineWidth = 3.5
        bezier12Path.stroke()


        //// Bezier 17 Drawing
        let bezier17Path = UIBezierPath()
        bezier17Path.move(to: CGPoint(x: 169, y: 231))
        bezier17Path.addLine(to: CGPoint(x: 175, y: 225))
        StyleKit.metroRed.setStroke()
        bezier17Path.lineWidth = 3.5
        bezier17Path.stroke()


        //// Bezier 25 Drawing
        let bezier25Path = UIBezierPath()
        bezier25Path.move(to: CGPoint(x: 249, y: 311))
        bezier25Path.addLine(to: CGPoint(x: 255, y: 305))
        StyleKit.metroRed.setStroke()
        bezier25Path.lineWidth = 3.5
        bezier25Path.stroke()


        //// Bezier 33 Drawing
        let bezier33Path = UIBezierPath()
        bezier33Path.move(to: CGPoint(x: 329, y: 391))
        bezier33Path.addLine(to: CGPoint(x: 335, y: 385))
        StyleKit.metroRed.setStroke()
        bezier33Path.lineWidth = 3.5
        bezier33Path.stroke()


        //// Bezier 37 Drawing
        let bezier37Path = UIBezierPath()
        bezier37Path.move(to: CGPoint(x: 369, y: 431))
        bezier37Path.addLine(to: CGPoint(x: 375, y: 425))
        StyleKit.metroRed.setStroke()
        bezier37Path.lineWidth = 3.5
        bezier37Path.stroke()


        //// Bezier 41 Drawing
        let bezier41Path = UIBezierPath()
        bezier41Path.move(to: CGPoint(x: 409, y: 471))
        bezier41Path.addLine(to: CGPoint(x: 415, y: 465))
        StyleKit.metroRed.setStroke()
        bezier41Path.lineWidth = 3.5
        bezier41Path.stroke()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 204, y: 270, width: 12, height: 18))
        StyleKit.metroGrey.setFill()
        rectanglePath.fill()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 204, y: 264, width: 12, height: 12))
        StyleKit.metroRed.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 204, y: 282, width: 12, height: 12))
        StyleKit.metroGreen.setFill()
        oval2Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 295, y: 355))
        bezier6Path.addLine(to: CGPoint(x: 285, y: 345))
        StyleKit.metroRed.setStroke()
        bezier6Path.lineWidth = 3.5
        bezier6Path.stroke()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 298.73, y: 332.79)
        context.rotate(by: 45 * CGFloat.pi/180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 12, height: 18))
        StyleKit.metroGrey.setFill()
        rectangle2Path.fill()

        context.restoreGState()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 284, y: 344, width: 12, height: 12))
        StyleKit.metroRed.setFill()
        oval3Path.fill()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 297, y: 331, width: 12, height: 12))
        StyleKit.metroBlue.setFill()
        oval4Path.fill()


        //// Text 15 Drawing
        let text15Rect = CGRect(x: 341, y: 374, width: 108, height: 21)
        let text15TextContent = "Pershamajsakja"
        let text15Style = NSMutableParagraphStyle()
        text15Style.alignment = .left
        let text15FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text15Style,
        ] as [NSAttributedString.Key: Any]

        let text15TextHeight: CGFloat = text15TextContent.boundingRect(with: CGSize(width: text15Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text15FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text15Rect)
        text15TextContent.draw(in: CGRect(x: text15Rect.minX, y: text15Rect.minY + (text15Rect.height - text15TextHeight) / 2, width: text15Rect.width, height: text15TextHeight), withAttributes: text15FontAttributes)
        context.restoreGState()


        //// Text 11 Drawing
        let text11Rect = CGRect(x: 379, y: 415, width: 106, height: 21)
        let text11TextContent = "Praletarskaja"
        let text11Style = NSMutableParagraphStyle()
        text11Style.alignment = .left
        let text11FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text11Style,
        ] as [NSAttributedString.Key: Any]

        let text11TextHeight: CGFloat = text11TextContent.boundingRect(with: CGSize(width: text11Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text11FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text11Rect)
        text11TextContent.draw(in: CGRect(x: text11Rect.minX, y: text11Rect.minY + (text11Rect.height - text11TextHeight) / 2, width: text11Rect.width, height: text11TextHeight), withAttributes: text11FontAttributes)
        context.restoreGState()


        //// Text 12 Drawing
        let text12Rect = CGRect(x: 419, y: 455, width: 108, height: 21)
        let text12TextContent = "Traktarny Zavod"
        let text12Style = NSMutableParagraphStyle()
        text12Style.alignment = .left
        let text12FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text12Style,
        ] as [NSAttributedString.Key: Any]

        let text12TextHeight: CGFloat = text12TextContent.boundingRect(with: CGSize(width: text12Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text12FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text12Rect)
        text12TextContent.draw(in: CGRect(x: text12Rect.minX, y: text12Rect.minY + (text12Rect.height - text12TextHeight) / 2, width: text12Rect.width, height: text12TextHeight), withAttributes: text12FontAttributes)
        context.restoreGState()


        //// Bezier 11 Drawing
        let bezier11Path = UIBezierPath()
        bezier11Path.move(to: CGPoint(x: 445, y: 515))
        bezier11Path.addLine(to: CGPoint(x: 451, y: 509))
        StyleKit.metroRed.setStroke()
        bezier11Path.lineWidth = 3.5
        bezier11Path.stroke()


        //// Bezier 13 Drawing
        let bezier13Path = UIBezierPath()
        bezier13Path.move(to: CGPoint(x: 485, y: 555))
        bezier13Path.addLine(to: CGPoint(x: 491, y: 549))
        StyleKit.metroRed.setStroke()
        bezier13Path.lineWidth = 3.5
        bezier13Path.stroke()


        //// Bezier 14 Drawing
        let bezier14Path = UIBezierPath()
        bezier14Path.move(to: CGPoint(x: 524, y: 596))
        bezier14Path.addLine(to: CGPoint(x: 536, y: 584))
        StyleKit.metroRed.setStroke()
        bezier14Path.lineWidth = 3.5
        bezier14Path.stroke()


        //// Rectangle 3 Drawing
        context.saveGState()
        context.translateBy(x: 245.73, y: 385.79)
        context.rotate(by: 45 * CGFloat.pi/180)

        let rectangle3Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 12, height: 18))
        StyleKit.metroGrey.setFill()
        rectangle3Path.fill()

        context.restoreGState()


        //// Oval 5 Drawing
        let oval5Path = UIBezierPath(ovalIn: CGRect(x: 244, y: 384, width: 12, height: 12))
        StyleKit.metroBlue.setFill()
        oval5Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 203, y: 330))
        bezier4Path.addLine(to: CGPoint(x: 210, y: 330))
        StyleKit.metroGreen.setStroke()
        bezier4Path.lineWidth = 3.5
        bezier4Path.stroke()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 210, y: 287.5))
        bezier7Path.addLine(to: CGPoint(x: 210, y: 345.5))
        StyleKit.metroGreen.setStroke()
        bezier7Path.lineWidth = 3.5
        bezier7Path.stroke()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 260, y: 483))
        bezier9Path.addLine(to: CGPoint(x: 274, y: 483))
        StyleKit.metroGreen.setStroke()
        bezier9Path.lineWidth = 3.5
        bezier9Path.stroke()


        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: 210, y: 344))
        bezier10Path.addCurve(to: CGPoint(x: 219, y: 378.39), controlPoint1: CGPoint(x: 210, y: 344), controlPoint2: CGPoint(x: 210, y: 362))
        bezier10Path.addCurve(to: CGPoint(x: 236, y: 402.66), controlPoint1: CGPoint(x: 228, y: 394.77), controlPoint2: CGPoint(x: 236, y: 402.66))
        bezier10Path.addCurve(to: CGPoint(x: 257, y: 438), controlPoint1: CGPoint(x: 236, y: 402.66), controlPoint2: CGPoint(x: 247, y: 415.05))
        bezier10Path.addCurve(to: CGPoint(x: 267, y: 482), controlPoint1: CGPoint(x: 267, y: 460.95), controlPoint2: CGPoint(x: 267, y: 482))
        StyleKit.metroGreen.setStroke()
        bezier10Path.lineWidth = 3.5
        bezier10Path.stroke()


        //// Oval 6 Drawing
        let oval6Path = UIBezierPath(ovalIn: CGRect(x: 231, y: 397, width: 12, height: 12))
        StyleKit.metroGreen.setFill()
        oval6Path.fill()


        //// Text Drawing
        let textRect = CGRect(x: 169, y: 339, width: 108, height: 21)
        let textTextContent = "Kupalawskaja"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .right
        let textFontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 6 Drawing
        let text6Rect = CGRect(x: 317, y: 326, width: 108, height: 21)
        let text6TextContent = "Kastrichnickaya"
        let text6Style = NSMutableParagraphStyle()
        text6Style.alignment = .left
        let text6FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text6Style,
        ] as [NSAttributedString.Key: Any]

        let text6TextHeight: CGFloat = text6TextContent.boundingRect(with: CGSize(width: text6Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text6FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text6Rect)
        text6TextContent.draw(in: CGRect(x: text6Rect.minX, y: text6Rect.minY + (text6Rect.height - text6TextHeight) / 2, width: text6Rect.width, height: text6TextHeight), withAttributes: text6FontAttributes)
        context.restoreGState()


        //// Text 7 Drawing
        let text7Rect = CGRect(x: 58, y: 277, width: 138, height: 21)
        let text7TextContent = "Jubilejnaja ploshcha"
        let text7Style = NSMutableParagraphStyle()
        text7Style.alignment = .right
        let text7FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text7Style,
        ] as [NSAttributedString.Key: Any]

        let text7TextHeight: CGFloat = text7TextContent.boundingRect(with: CGSize(width: text7Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text7FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text7Rect)
        text7TextContent.draw(in: CGRect(x: text7Rect.minX, y: text7Rect.minY + (text7Rect.height - text7TextHeight) / 2, width: text7Rect.width, height: text7TextHeight), withAttributes: text7FontAttributes)
        context.restoreGState()


        //// Text 13 Drawing
        let text13Rect = CGRect(x: 34, y: 317, width: 162, height: 25)
        let text13TextContent = "Ploshcha\nFrancishka Bahushevicha"
        let text13Style = NSMutableParagraphStyle()
        text13Style.alignment = .right
        let text13FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text13Style,
        ] as [NSAttributedString.Key: Any]

        let text13TextHeight: CGFloat = text13TextContent.boundingRect(with: CGSize(width: text13Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text13FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text13Rect)
        text13TextContent.draw(in: CGRect(x: text13Rect.minX, y: text13Rect.minY + (text13Rect.height - text13TextHeight) / 2, width: text13Rect.width, height: text13TextHeight), withAttributes: text13FontAttributes)
        context.restoreGState()


        //// Text 14 Drawing
        let text14Rect = CGRect(x: 87, y: 392, width: 138, height: 21)
        let text14TextContent = "Vakzalnaya"
        let text14Style = NSMutableParagraphStyle()
        text14Style.alignment = .right
        let text14FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text14Style,
        ] as [NSAttributedString.Key: Any]

        let text14TextHeight: CGFloat = text14TextContent.boundingRect(with: CGSize(width: text14Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text14FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text14Rect)
        text14TextContent.draw(in: CGRect(x: text14Rect.minX, y: text14Rect.minY + (text14Rect.height - text14TextHeight) / 2, width: text14Rect.width, height: text14TextHeight), withAttributes: text14FontAttributes)
        context.restoreGState()


        //// Text 16 Drawing
        let text16Rect = CGRect(x: 284, y: 471, width: 75, height: 25)
        let text16TextContent = "Kavalskaya\nSlabada"
        let text16Style = NSMutableParagraphStyle()
        text16Style.alignment = .left
        let text16FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text16Style,
        ] as [NSAttributedString.Key: Any]

        let text16TextHeight: CGFloat = text16TextContent.boundingRect(with: CGSize(width: text16Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text16FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text16Rect)
        text16TextContent.draw(in: CGRect(x: text16Rect.minX, y: text16Rect.minY + (text16Rect.height - text16TextHeight) / 2, width: text16Rect.width, height: text16TextHeight), withAttributes: text16FontAttributes)
        context.restoreGState()


        //// Text 17 Drawing
        let text17Rect = CGRect(x: 329, y: 501, width: 108, height: 21)
        let text17TextContent = "Partyzanskaja"
        let text17Style = NSMutableParagraphStyle()
        text17Style.alignment = .right
        let text17FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text17Style,
        ] as [NSAttributedString.Key: Any]

        let text17TextHeight: CGFloat = text17TextContent.boundingRect(with: CGSize(width: text17Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text17FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text17Rect)
        text17TextContent.draw(in: CGRect(x: text17Rect.minX, y: text17Rect.minY + (text17Rect.height - text17TextHeight) / 2, width: text17Rect.width, height: text17TextHeight), withAttributes: text17FontAttributes)
        context.restoreGState()


        //// Text 18 Drawing
        let text18Rect = CGRect(x: 369, y: 541, width: 108, height: 21)
        let text18TextContent = "Awazavodskaja"
        let text18Style = NSMutableParagraphStyle()
        text18Style.alignment = .right
        let text18FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text18Style,
        ] as [NSAttributedString.Key: Any]

        let text18TextHeight: CGFloat = text18TextContent.boundingRect(with: CGSize(width: text18Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text18FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text18Rect)
        text18TextContent.draw(in: CGRect(x: text18Rect.minX, y: text18Rect.minY + (text18Rect.height - text18TextHeight) / 2, width: text18Rect.width, height: text18TextHeight), withAttributes: text18FontAttributes)
        context.restoreGState()


        //// Text 19 Drawing
        let text19Rect = CGRect(x: 409, y: 584, width: 108, height: 21)
        let text19TextContent = "Magiliowsakaja"
        let text19Style = NSMutableParagraphStyle()
        text19Style.alignment = .right
        let text19FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text19Style,
        ] as [NSAttributedString.Key: Any]

        let text19TextHeight: CGFloat = text19TextContent.boundingRect(with: CGSize(width: text19Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text19FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text19Rect)
        text19TextContent.draw(in: CGRect(x: text19Rect.minX, y: text19Rect.minY + (text19Rect.height - text19TextHeight) / 2, width: text19Rect.width, height: text19TextHeight), withAttributes: text19FontAttributes)
        context.restoreGState()


        //// Text 20 Drawing
        let text20Rect = CGRect(x: 73, y: 377, width: 166, height: 21)
        let text20TextContent = "Ploshcha Lenina"
        let text20Style = NSMutableParagraphStyle()
        text20Style.alignment = .right
        let text20FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text20Style,
        ] as [NSAttributedString.Key: Any]

        let text20TextHeight: CGFloat = text20TextContent.boundingRect(with: CGSize(width: text20Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text20FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text20Rect)
        text20TextContent.draw(in: CGRect(x: text20Rect.minX, y: text20Rect.minY + (text20Rect.height - text20TextHeight) / 2, width: text20Rect.width, height: text20TextHeight), withAttributes: text20FontAttributes)
        context.restoreGState()


        //// Bezier 15 Drawing
        let bezier15Path = UIBezierPath()
        bezier15Path.move(to: CGPoint(x: 343.5, y: 294))
        bezier15Path.addLine(to: CGPoint(x: 349.5, y: 300))
        StyleKit.metroBlue.setStroke()
        bezier15Path.lineWidth = 3.5
        bezier15Path.stroke()


        //// Bezier 16 Drawing
        let bezier16Path = UIBezierPath()
        bezier16Path.move(to: CGPoint(x: 383.5, y: 254))
        bezier16Path.addLine(to: CGPoint(x: 389.5, y: 260))
        StyleKit.metroBlue.setStroke()
        bezier16Path.lineWidth = 3.5
        bezier16Path.stroke()


        //// Bezier 18 Drawing
        let bezier18Path = UIBezierPath()
        bezier18Path.move(to: CGPoint(x: 423.5, y: 214))
        bezier18Path.addLine(to: CGPoint(x: 429.5, y: 220))
        StyleKit.metroBlue.setStroke()
        bezier18Path.lineWidth = 3.5
        bezier18Path.stroke()


        //// Text 21 Drawing
        let text21Rect = CGRect(x: 353, y: 290, width: 120, height: 21)
        let text21TextContent = "Ploshcha Peramogi"
        let text21Style = NSMutableParagraphStyle()
        text21Style.alignment = .left
        let text21FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text21Style,
        ] as [NSAttributedString.Key: Any]

        let text21TextHeight: CGFloat = text21TextContent.boundingRect(with: CGSize(width: text21Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text21FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text21Rect)
        text21TextContent.draw(in: CGRect(x: text21Rect.minX, y: text21Rect.minY + (text21Rect.height - text21TextHeight) / 2, width: text21Rect.width, height: text21TextHeight), withAttributes: text21FontAttributes)
        context.restoreGState()


        //// Text 22 Drawing
        let text22Rect = CGRect(x: 392, y: 251, width: 149, height: 21)
        let text22TextContent = "Ploshcha Yakuba Kolasa"
        let text22Style = NSMutableParagraphStyle()
        text22Style.alignment = .left
        let text22FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text22Style,
        ] as [NSAttributedString.Key: Any]

        let text22TextHeight: CGFloat = text22TextContent.boundingRect(with: CGSize(width: text22Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text22FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text22Rect)
        text22TextContent.draw(in: CGRect(x: text22Rect.minX, y: text22Rect.minY + (text22Rect.height - text22TextHeight) / 2, width: text22Rect.width, height: text22TextHeight), withAttributes: text22FontAttributes)
        context.restoreGState()


        //// Text 23 Drawing
        let text23Rect = CGRect(x: 432, y: 210, width: 120, height: 21)
        let text23TextContent = "Akademija navuk"
        let text23Style = NSMutableParagraphStyle()
        text23Style.alignment = .left
        let text23FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text23Style,
        ] as [NSAttributedString.Key: Any]

        let text23TextHeight: CGFloat = text23TextContent.boundingRect(with: CGSize(width: text23Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text23FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text23Rect)
        text23TextContent.draw(in: CGRect(x: text23Rect.minX, y: text23Rect.minY + (text23Rect.height - text23TextHeight) / 2, width: text23Rect.width, height: text23TextHeight), withAttributes: text23FontAttributes)
        context.restoreGState()


        //// Text 24 Drawing
        let text24Rect = CGRect(x: 333, y: 163, width: 120, height: 21)
        let text24TextContent = "Park Chaluskincaw"
        let text24Style = NSMutableParagraphStyle()
        text24Style.alignment = .right
        let text24FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text24Style,
        ] as [NSAttributedString.Key: Any]

        let text24TextHeight: CGFloat = text24TextContent.boundingRect(with: CGSize(width: text24Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text24FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text24Rect)
        text24TextContent.draw(in: CGRect(x: text24Rect.minX, y: text24Rect.minY + (text24Rect.height - text24TextHeight) / 2, width: text24Rect.width, height: text24TextHeight), withAttributes: text24FontAttributes)
        context.restoreGState()


        //// Text 25 Drawing
        let text25Rect = CGRect(x: 373, y: 123, width: 120, height: 21)
        let text25TextContent = "Maskowskaja"
        let text25Style = NSMutableParagraphStyle()
        text25Style.alignment = .right
        let text25FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text25Style,
        ] as [NSAttributedString.Key: Any]

        let text25TextHeight: CGFloat = text25TextContent.boundingRect(with: CGSize(width: text25Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text25FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text25Rect)
        text25TextContent.draw(in: CGRect(x: text25Rect.minX, y: text25Rect.minY + (text25Rect.height - text25TextHeight) / 2, width: text25Rect.width, height: text25TextHeight), withAttributes: text25FontAttributes)
        context.restoreGState()


        //// Text 26 Drawing
        let text26Rect = CGRect(x: 413, y: 83, width: 120, height: 21)
        let text26TextContent = "Uschod"
        let text26Style = NSMutableParagraphStyle()
        text26Style.alignment = .right
        let text26FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text26Style,
        ] as [NSAttributedString.Key: Any]

        let text26TextHeight: CGFloat = text26TextContent.boundingRect(with: CGSize(width: text26Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text26FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text26Rect)
        text26TextContent.draw(in: CGRect(x: text26Rect.minX, y: text26Rect.minY + (text26Rect.height - text26TextHeight) / 2, width: text26Rect.width, height: text26TextHeight), withAttributes: text26FontAttributes)
        context.restoreGState()


        //// Text 27 Drawing
        let text27Rect = CGRect(x: 453, y: 43, width: 120, height: 21)
        let text27TextContent = "Barysawski Trakt"
        let text27Style = NSMutableParagraphStyle()
        text27Style.alignment = .right
        let text27FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text27Style,
        ] as [NSAttributedString.Key: Any]

        let text27TextHeight: CGFloat = text27TextContent.boundingRect(with: CGSize(width: text27Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text27FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text27Rect)
        text27TextContent.draw(in: CGRect(x: text27Rect.minX, y: text27Rect.minY + (text27Rect.height - text27TextHeight) / 2, width: text27Rect.width, height: text27TextHeight), withAttributes: text27FontAttributes)
        context.restoreGState()


        //// Text 28 Drawing
        let text28Rect = CGRect(x: 491, y: 0, width: 120, height: 21)
        let text28TextContent = "Uruchcha"
        let text28Style = NSMutableParagraphStyle()
        text28Style.alignment = .right
        let text28FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text28Style,
        ] as [NSAttributedString.Key: Any]

        let text28TextHeight: CGFloat = text28TextContent.boundingRect(with: CGSize(width: text28Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text28FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text28Rect)
        text28TextContent.draw(in: CGRect(x: text28Rect.minX, y: text28Rect.minY + (text28Rect.height - text28TextHeight) / 2, width: text28Rect.width, height: text28TextHeight), withAttributes: text28FontAttributes)
        context.restoreGState()


        //// Bezier 22 Drawing
        let bezier22Path = UIBezierPath()
        bezier22Path.move(to: CGPoint(x: 460, y: 170.5))
        bezier22Path.addLine(to: CGPoint(x: 466, y: 176.5))
        StyleKit.metroBlue.setStroke()
        bezier22Path.lineWidth = 3.5
        bezier22Path.stroke()


        //// Bezier 23 Drawing
        let bezier23Path = UIBezierPath()
        bezier23Path.move(to: CGPoint(x: 500, y: 130.5))
        bezier23Path.addLine(to: CGPoint(x: 506, y: 136.5))
        StyleKit.metroBlue.setStroke()
        bezier23Path.lineWidth = 3.5
        bezier23Path.stroke()


        //// Bezier 24 Drawing
        let bezier24Path = UIBezierPath()
        bezier24Path.move(to: CGPoint(x: 540, y: 90.5))
        bezier24Path.addLine(to: CGPoint(x: 546, y: 96.5))
        StyleKit.metroBlue.setStroke()
        bezier24Path.lineWidth = 3.5
        bezier24Path.stroke()


        //// Bezier 19 Drawing
        let bezier19Path = UIBezierPath()
        bezier19Path.move(to: CGPoint(x: 580, y: 50.5))
        bezier19Path.addLine(to: CGPoint(x: 586, y: 56.5))
        StyleKit.metroBlue.setStroke()
        bezier19Path.lineWidth = 3.5
        bezier19Path.stroke()


        //// Bezier 20 Drawing
        let bezier20Path = UIBezierPath()
        bezier20Path.move(to: CGPoint(x: 620, y: 10.5))
        bezier20Path.addLine(to: CGPoint(x: 626, y: 16.5))
        StyleKit.metroBlue.setStroke()
        bezier20Path.lineWidth = 3.5
        bezier20Path.stroke()


        //// Bezier 26 Drawing
        let bezier26Path = UIBezierPath()
        bezier26Path.move(to: CGPoint(x: 192, y: 438.5))
        bezier26Path.addLine(to: CGPoint(x: 198, y: 444.5))
        StyleKit.metroBlue.setStroke()
        bezier26Path.lineWidth = 3.5
        bezier26Path.stroke()


        //// Text 29 Drawing
        let text29Rect = CGRect(x: 46, y: 428, width: 138, height: 21)
        let text29TextContent = "Instytut Kultury"
        let text29Style = NSMutableParagraphStyle()
        text29Style.alignment = .right
        let text29FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text29Style,
        ] as [NSAttributedString.Key: Any]

        let text29TextHeight: CGFloat = text29TextContent.boundingRect(with: CGSize(width: text29Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text29FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text29Rect)
        text29TextContent.draw(in: CGRect(x: text29Rect.minX, y: text29Rect.minY + (text29Rect.height - text29TextHeight) / 2, width: text29Rect.width, height: text29TextHeight), withAttributes: text29FontAttributes)
        context.restoreGState()


        //// Bezier 31 Drawing
        let bezier31Path = UIBezierPath()
        bezier31Path.move(to: CGPoint(x: 155.5, y: 482))
        bezier31Path.addLine(to: CGPoint(x: 161.5, y: 488))
        StyleKit.metroBlue.setStroke()
        bezier31Path.lineWidth = 3.5
        bezier31Path.stroke()


        //// Bezier 32 Drawing
        let bezier32Path = UIBezierPath()
        bezier32Path.move(to: CGPoint(x: 115.5, y: 522))
        bezier32Path.addLine(to: CGPoint(x: 121.5, y: 528))
        StyleKit.metroBlue.setStroke()
        bezier32Path.lineWidth = 3.5
        bezier32Path.stroke()


        //// Bezier 21 Drawing
        let bezier21Path = UIBezierPath()
        bezier21Path.move(to: CGPoint(x: 75.5, y: 562))
        bezier21Path.addLine(to: CGPoint(x: 81.5, y: 568))
        StyleKit.metroBlue.setStroke()
        bezier21Path.lineWidth = 3.5
        bezier21Path.stroke()


        //// Bezier 27 Drawing
        let bezier27Path = UIBezierPath()
        bezier27Path.move(to: CGPoint(x: 29, y: 598))
        bezier27Path.addLine(to: CGPoint(x: 41, y: 610))
        StyleKit.metroBlue.setStroke()
        bezier27Path.lineWidth = 3.5
        bezier27Path.stroke()


        //// Text 30 Drawing
        let text30Rect = CGRect(x: 166, y: 482, width: 108, height: 21)
        let text30TextContent = "Grushawka"
        let text30Style = NSMutableParagraphStyle()
        text30Style.alignment = .left
        let text30FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text30Style,
        ] as [NSAttributedString.Key: Any]

        let text30TextHeight: CGFloat = text30TextContent.boundingRect(with: CGSize(width: text30Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text30FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text30Rect)
        text30TextContent.draw(in: CGRect(x: text30Rect.minX, y: text30Rect.minY + (text30Rect.height - text30TextHeight) / 2, width: text30Rect.width, height: text30TextHeight), withAttributes: text30FontAttributes)
        context.restoreGState()


        //// Text 31 Drawing
        let text31Rect = CGRect(x: 128, y: 522, width: 108, height: 21)
        let text31TextContent = "Mihalova"
        let text31Style = NSMutableParagraphStyle()
        text31Style.alignment = .left
        let text31FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text31Style,
        ] as [NSAttributedString.Key: Any]

        let text31TextHeight: CGFloat = text31TextContent.boundingRect(with: CGSize(width: text31Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text31FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text31Rect)
        text31TextContent.draw(in: CGRect(x: text31Rect.minX, y: text31Rect.minY + (text31Rect.height - text31TextHeight) / 2, width: text31Rect.width, height: text31TextHeight), withAttributes: text31FontAttributes)
        context.restoreGState()


        //// Text 32 Drawing
        let text32Rect = CGRect(x: 90, y: 562, width: 108, height: 21)
        let text32TextContent = "Piatrowshchyna"
        let text32Style = NSMutableParagraphStyle()
        text32Style.alignment = .left
        let text32FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text32Style,
        ] as [NSAttributedString.Key: Any]

        let text32TextHeight: CGFloat = text32TextContent.boundingRect(with: CGSize(width: text32Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text32FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text32Rect)
        text32TextContent.draw(in: CGRect(x: text32Rect.minX, y: text32Rect.minY + (text32Rect.height - text32TextHeight) / 2, width: text32Rect.width, height: text32TextHeight), withAttributes: text32FontAttributes)
        context.restoreGState()


        //// Text 33 Drawing
        let text33Rect = CGRect(x: 48, y: 598, width: 108, height: 21)
        let text33TextContent = "Malinawka"
        let text33Style = NSMutableParagraphStyle()
        text33Style.alignment = .left
        let text33FontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text33Style,
        ] as [NSAttributedString.Key: Any]

        let text33TextHeight: CGFloat = text33TextContent.boundingRect(with: CGSize(width: text33Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text33FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text33Rect)
        text33TextContent.draw(in: CGRect(x: text33Rect.minX, y: text33Rect.minY + (text33Rect.height - text33TextHeight) / 2, width: text33Rect.width, height: text33TextHeight), withAttributes: text33FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }




    @objc(StyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
