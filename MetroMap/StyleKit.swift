//
//  StyleKit25dec.swift
//  MetroMap
//
//  Created by Den Haritonenko on 25.12.24.
//  Copyright Â© 2024. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class StyleKit: NSObject {

    //// Cache

    private struct Cache {
        static let metroBlue: UIColor = UIColor(red: 0.214, green: 0.175, blue: 0.530, alpha: 1.000)
        static let metroRed: UIColor = UIColor(red: 0.888, green: 0.119, blue: 0.144, alpha: 1.000)
        static let metroGreen: UIColor = UIColor(red: 0.000, green: 0.593, blue: 0.279, alpha: 1.000)
        static let metroGrey: UIColor = UIColor(red: 0.839, green: 0.856, blue: 0.871, alpha: 1.000)
        static let metroWhite: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
    }

    //// Colors

    @objc dynamic public class var metroBlue: UIColor { return Cache.metroBlue }
    @objc dynamic public class var metroRed: UIColor { return Cache.metroRed }
    @objc dynamic public class var metroGreen: UIColor { return Cache.metroGreen }
    @objc dynamic public class var metroGrey: UIColor { return Cache.metroGrey }
    @objc dynamic public class var metroWhite: UIColor { return Cache.metroWhite }

    //// Drawing Methods

    @objc dynamic public class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 630, height: 630), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 630, height: 630), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 630, y: resizedFrame.height / 630)


        //// st223 Drawing
        let st223Rect = CGRect(x: 21, y: 54, width: 108, height: 21)
        let st223TextContent = "Kamennaja Gorka"
        let st223Style = NSMutableParagraphStyle()
        st223Style.alignment = .left
        let st223FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st223Style,
        ] as [NSAttributedString.Key: Any]

        let st223TextHeight: CGFloat = st223TextContent.boundingRect(with: CGSize(width: st223Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st223FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st223Rect)
        st223TextContent.draw(in: CGRect(x: st223Rect.minX, y: st223Rect.minY + (st223Rect.height - st223TextHeight) / 2, width: st223Rect.width, height: st223TextHeight), withAttributes: st223FontAttributes)
        context.restoreGState()


        //// st222 Drawing
        let st222Rect = CGRect(x: 61, y: 93, width: 108, height: 21)
        let st222TextContent = "Kuncawshchyna"
        let st222Style = NSMutableParagraphStyle()
        st222Style.alignment = .left
        let st222FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st222Style,
        ] as [NSAttributedString.Key: Any]

        let st222TextHeight: CGFloat = st222TextContent.boundingRect(with: CGSize(width: st222Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st222FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st222Rect)
        st222TextContent.draw(in: CGRect(x: st222Rect.minX, y: st222Rect.minY + (st222Rect.height - st222TextHeight) / 2, width: st222Rect.width, height: st222TextHeight), withAttributes: st222FontAttributes)
        context.restoreGState()


        //// st221 Drawing
        let st221Rect = CGRect(x: 100, y: 134, width: 108, height: 21)
        let st221TextContent = "Spartywnaja"
        let st221Style = NSMutableParagraphStyle()
        st221Style.alignment = .left
        let st221FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st221Style,
        ] as [NSAttributedString.Key: Any]

        let st221TextHeight: CGFloat = st221TextContent.boundingRect(with: CGSize(width: st221Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st221FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st221Rect)
        st221TextContent.draw(in: CGRect(x: st221Rect.minX, y: st221Rect.minY + (st221Rect.height - st221TextHeight) / 2, width: st221Rect.width, height: st221TextHeight), withAttributes: st221FontAttributes)
        context.restoreGState()


        //// st220 Drawing
        let st220Rect = CGRect(x: 141, y: 174, width: 108, height: 21)
        let st220TextContent = "Pushkinskaya"
        let st220Style = NSMutableParagraphStyle()
        st220Style.alignment = .left
        let st220FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st220Style,
        ] as [NSAttributedString.Key: Any]

        let st220TextHeight: CGFloat = st220TextContent.boundingRect(with: CGSize(width: st220Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st220FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st220Rect)
        st220TextContent.draw(in: CGRect(x: st220Rect.minX, y: st220Rect.minY + (st220Rect.height - st220TextHeight) / 2, width: st220Rect.width, height: st220TextHeight), withAttributes: st220FontAttributes)
        context.restoreGState()


        //// st219 Drawing
        let st219Rect = CGRect(x: 181, y: 219, width: 108, height: 21)
        let st219TextContent = "Maladziozhnaja"
        let st219Style = NSMutableParagraphStyle()
        st219Style.alignment = .left
        let st219FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st219Style,
        ] as [NSAttributedString.Key: Any]

        let st219TextHeight: CGFloat = st219TextContent.boundingRect(with: CGSize(width: st219Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st219FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st219Rect)
        st219TextContent.draw(in: CGRect(x: st219Rect.minX, y: st219Rect.minY + (st219Rect.height - st219TextHeight) / 2, width: st219Rect.width, height: st219TextHeight), withAttributes: st219FontAttributes)
        context.restoreGState()


        //// st218 Drawing
        let st218Rect = CGRect(x: 221, y: 254, width: 108, height: 21)
        let st218TextContent = "Frunzenskaya"
        let st218Style = NSMutableParagraphStyle()
        st218Style.alignment = .left
        let st218FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st218Style,
        ] as [NSAttributedString.Key: Any]

        let st218TextHeight: CGFloat = st218TextContent.boundingRect(with: CGSize(width: st218Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st218FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st218Rect)
        st218TextContent.draw(in: CGRect(x: st218Rect.minX, y: st218Rect.minY + (st218Rect.height - st218TextHeight) / 2, width: st218Rect.width, height: st218TextHeight), withAttributes: st218FontAttributes)
        context.restoreGState()


        //// st217 Drawing
        let st217Rect = CGRect(x: 261, y: 294, width: 108, height: 21)
        let st217TextContent = "Niamiha"
        let st217Style = NSMutableParagraphStyle()
        st217Style.alignment = .left
        let st217FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st217Style,
        ] as [NSAttributedString.Key: Any]

        let st217TextHeight: CGFloat = st217TextContent.boundingRect(with: CGSize(width: st217Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st217FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st217Rect)
        st217TextContent.draw(in: CGRect(x: st217Rect.minX, y: st217Rect.minY + (st217Rect.height - st217TextHeight) / 2, width: st217Rect.width, height: st217TextHeight), withAttributes: st217FontAttributes)
        context.restoreGState()


        //// st215 Drawing
        let st215Rect = CGRect(x: 341, y: 374, width: 108, height: 21)
        let st215TextContent = "Pershamajsakja"
        let st215Style = NSMutableParagraphStyle()
        st215Style.alignment = .left
        let st215FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st215Style,
        ] as [NSAttributedString.Key: Any]

        let st215TextHeight: CGFloat = st215TextContent.boundingRect(with: CGSize(width: st215Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st215FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st215Rect)
        st215TextContent.draw(in: CGRect(x: st215Rect.minX, y: st215Rect.minY + (st215Rect.height - st215TextHeight) / 2, width: st215Rect.width, height: st215TextHeight), withAttributes: st215FontAttributes)
        context.restoreGState()


        //// st214 Drawing
        let st214Rect = CGRect(x: 379, y: 415, width: 106, height: 21)
        let st214TextContent = "Praletarskaja"
        let st214Style = NSMutableParagraphStyle()
        st214Style.alignment = .left
        let st214FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st214Style,
        ] as [NSAttributedString.Key: Any]

        let st214TextHeight: CGFloat = st214TextContent.boundingRect(with: CGSize(width: st214Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st214FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st214Rect)
        st214TextContent.draw(in: CGRect(x: st214Rect.minX, y: st214Rect.minY + (st214Rect.height - st214TextHeight) / 2, width: st214Rect.width, height: st214TextHeight), withAttributes: st214FontAttributes)
        context.restoreGState()


        //// st213 Drawing
        let st213Rect = CGRect(x: 419, y: 455, width: 108, height: 21)
        let st213TextContent = "Traktarny Zavod"
        let st213Style = NSMutableParagraphStyle()
        st213Style.alignment = .left
        let st213FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st213Style,
        ] as [NSAttributedString.Key: Any]

        let st213TextHeight: CGFloat = st213TextContent.boundingRect(with: CGSize(width: st213Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st213FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st213Rect)
        st213TextContent.draw(in: CGRect(x: st213Rect.minX, y: st213Rect.minY + (st213Rect.height - st213TextHeight) / 2, width: st213Rect.width, height: st213TextHeight), withAttributes: st213FontAttributes)
        context.restoreGState()


        //// st212 Drawing
        let st212Rect = CGRect(x: 462, y: 498, width: 108, height: 21)
        let st212TextContent = "Partyzanskaja"
        let st212Style = NSMutableParagraphStyle()
        st212Style.alignment = .left
        let st212FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st212Style,
        ] as [NSAttributedString.Key: Any]

        let st212TextHeight: CGFloat = st212TextContent.boundingRect(with: CGSize(width: st212Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st212FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st212Rect)
        st212TextContent.draw(in: CGRect(x: st212Rect.minX, y: st212Rect.minY + (st212Rect.height - st212TextHeight) / 2, width: st212Rect.width, height: st212TextHeight), withAttributes: st212FontAttributes)
        context.restoreGState()


        //// st211 Drawing
        let st211Rect = CGRect(x: 369, y: 541, width: 108, height: 21)
        let st211TextContent = "Awazavodskaja"
        let st211Style = NSMutableParagraphStyle()
        st211Style.alignment = .right
        let st211FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st211Style,
        ] as [NSAttributedString.Key: Any]

        let st211TextHeight: CGFloat = st211TextContent.boundingRect(with: CGSize(width: st211Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st211FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st211Rect)
        st211TextContent.draw(in: CGRect(x: st211Rect.minX, y: st211Rect.minY + (st211Rect.height - st211TextHeight) / 2, width: st211Rect.width, height: st211TextHeight), withAttributes: st211FontAttributes)
        context.restoreGState()


        //// st210 Drawing
        let st210Rect = CGRect(x: 409, y: 584, width: 108, height: 21)
        let st210TextContent = "Magiliowsakaja"
        let st210Style = NSMutableParagraphStyle()
        st210Style.alignment = .right
        let st210FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st210Style,
        ] as [NSAttributedString.Key: Any]

        let st210TextHeight: CGFloat = st210TextContent.boundingRect(with: CGSize(width: st210Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st210FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st210Rect)
        st210TextContent.draw(in: CGRect(x: st210Rect.minX, y: st210Rect.minY + (st210Rect.height - st210TextHeight) / 2, width: st210Rect.width, height: st210TextHeight), withAttributes: st210FontAttributes)
        context.restoreGState()


        //// st316 Drawing
        let st316Rect = CGRect(x: 58, y: 277, width: 138, height: 21)
        let st316TextContent = "Jubilejnaja ploshcha"
        let st316Style = NSMutableParagraphStyle()
        st316Style.alignment = .right
        let st316FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st316Style,
        ] as [NSAttributedString.Key: Any]

        let st316TextHeight: CGFloat = st316TextContent.boundingRect(with: CGSize(width: st316Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st316FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st316Rect)
        st316TextContent.draw(in: CGRect(x: st316Rect.minX, y: st316Rect.minY + (st316Rect.height - st316TextHeight) / 2, width: st316Rect.width, height: st316TextHeight), withAttributes: st316FontAttributes)
        context.restoreGState()


        //// st315 Drawing
        let st315Rect = CGRect(x: 34, y: 317, width: 162, height: 25)
        let st315TextContent = "Ploshcha\nFrancishka Bahushevicha"
        let st315Style = NSMutableParagraphStyle()
        st315Style.alignment = .right
        let st315FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st315Style,
        ] as [NSAttributedString.Key: Any]

        let st315TextHeight: CGFloat = st315TextContent.boundingRect(with: CGSize(width: st315Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st315FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st315Rect)
        st315TextContent.draw(in: CGRect(x: st315Rect.minX, y: st315Rect.minY + (st315Rect.height - st315TextHeight) / 2, width: st315Rect.width, height: st315TextHeight), withAttributes: st315FontAttributes)
        context.restoreGState()


        //// st314 Drawing
        let st314Rect = CGRect(x: 252, y: 392, width: 77, height: 21)
        let st314TextContent = "Vakzalnaya"
        let st314Style = NSMutableParagraphStyle()
        st314Style.alignment = .left
        let st314FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st314Style,
        ] as [NSAttributedString.Key: Any]

        let st314TextHeight: CGFloat = st314TextContent.boundingRect(with: CGSize(width: st314Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st314FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st314Rect)
        st314TextContent.draw(in: CGRect(x: st314Rect.minX, y: st314Rect.minY + (st314Rect.height - st314TextHeight) / 2, width: st314Rect.width, height: st314TextHeight), withAttributes: st314FontAttributes)
        context.restoreGState()


        //// st313 Drawing
        let st313Rect = CGRect(x: 277, y: 470, width: 75, height: 25)
        let st313TextContent = "Kavalskaya\nSlabada"
        let st313Style = NSMutableParagraphStyle()
        st313Style.alignment = .left
        let st313FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st313Style,
        ] as [NSAttributedString.Key: Any]

        let st313TextHeight: CGFloat = st313TextContent.boundingRect(with: CGSize(width: st313Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st313FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st313Rect)
        st313TextContent.draw(in: CGRect(x: st313Rect.minX, y: st313Rect.minY + (st313Rect.height - st313TextHeight) / 2, width: st313Rect.width, height: st313TextHeight), withAttributes: st313FontAttributes)
        context.restoreGState()


        //// st110 Drawing
        let st110Rect = CGRect(x: 47, y: 598, width: 108, height: 21)
        let st110TextContent = "Malinawka"
        let st110Style = NSMutableParagraphStyle()
        st110Style.alignment = .left
        let st110FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st110Style,
        ] as [NSAttributedString.Key: Any]

        let st110TextHeight: CGFloat = st110TextContent.boundingRect(with: CGSize(width: st110Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st110FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st110Rect)
        st110TextContent.draw(in: CGRect(x: st110Rect.minX, y: st110Rect.minY + (st110Rect.height - st110TextHeight) / 2, width: st110Rect.width, height: st110TextHeight), withAttributes: st110FontAttributes)
        context.restoreGState()


        //// st111 Drawing
        let st111Rect = CGRect(x: 83, y: 562, width: 108, height: 21)
        let st111TextContent = "Piatrowshchyna"
        let st111Style = NSMutableParagraphStyle()
        st111Style.alignment = .left
        let st111FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st111Style,
        ] as [NSAttributedString.Key: Any]

        let st111TextHeight: CGFloat = st111TextContent.boundingRect(with: CGSize(width: st111Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st111FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st111Rect)
        st111TextContent.draw(in: CGRect(x: st111Rect.minX, y: st111Rect.minY + (st111Rect.height - st111TextHeight) / 2, width: st111Rect.width, height: st111TextHeight), withAttributes: st111FontAttributes)
        context.restoreGState()


        //// st112 Drawing
        let st112Rect = CGRect(x: 123, y: 522, width: 108, height: 21)
        let st112TextContent = "Mihalova"
        let st112Style = NSMutableParagraphStyle()
        st112Style.alignment = .left
        let st112FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st112Style,
        ] as [NSAttributedString.Key: Any]

        let st112TextHeight: CGFloat = st112TextContent.boundingRect(with: CGSize(width: st112Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st112FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st112Rect)
        st112TextContent.draw(in: CGRect(x: st112Rect.minX, y: st112Rect.minY + (st112Rect.height - st112TextHeight) / 2, width: st112Rect.width, height: st112TextHeight), withAttributes: st112FontAttributes)
        context.restoreGState()


        //// st113 Drawing
        let st113Rect = CGRect(x: 162, y: 482, width: 85, height: 21)
        let st113TextContent = "Grushawka"
        let st113Style = NSMutableParagraphStyle()
        st113Style.alignment = .left
        let st113FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st113Style,
        ] as [NSAttributedString.Key: Any]

        let st113TextHeight: CGFloat = st113TextContent.boundingRect(with: CGSize(width: st113Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st113FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st113Rect)
        st113TextContent.draw(in: CGRect(x: st113Rect.minX, y: st113Rect.minY + (st113Rect.height - st113TextHeight) / 2, width: st113Rect.width, height: st113TextHeight), withAttributes: st113FontAttributes)
        context.restoreGState()


        //// st114 Drawing
        let st114Rect = CGRect(x: 48, y: 428, width: 138, height: 21)
        let st114TextContent = "Instytut Kultury"
        let st114Style = NSMutableParagraphStyle()
        st114Style.alignment = .right
        let st114FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st114Style,
        ] as [NSAttributedString.Key: Any]

        let st114TextHeight: CGFloat = st114TextContent.boundingRect(with: CGSize(width: st114Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st114FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st114Rect)
        st114TextContent.draw(in: CGRect(x: st114Rect.minX, y: st114Rect.minY + (st114Rect.height - st114TextHeight) / 2, width: st114Rect.width, height: st114TextHeight), withAttributes: st114FontAttributes)
        context.restoreGState()


        //// st116 Drawing
        let st116Rect = CGRect(x: 317, y: 326, width: 108, height: 21)
        let st116TextContent = "Kastrichnickaya"
        let st116Style = NSMutableParagraphStyle()
        st116Style.alignment = .left
        let st116FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st116Style,
        ] as [NSAttributedString.Key: Any]

        let st116TextHeight: CGFloat = st116TextContent.boundingRect(with: CGSize(width: st116Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st116FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st116Rect)
        st116TextContent.draw(in: CGRect(x: st116Rect.minX, y: st116Rect.minY + (st116Rect.height - st116TextHeight) / 2, width: st116Rect.width, height: st116TextHeight), withAttributes: st116FontAttributes)
        context.restoreGState()


        //// st117 Drawing
        let st117Rect = CGRect(x: 353, y: 290, width: 120, height: 21)
        let st117TextContent = "Ploshcha Peramohi"
        let st117Style = NSMutableParagraphStyle()
        st117Style.alignment = .left
        let st117FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st117Style,
        ] as [NSAttributedString.Key: Any]

        let st117TextHeight: CGFloat = st117TextContent.boundingRect(with: CGSize(width: st117Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st117FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st117Rect)
        st117TextContent.draw(in: CGRect(x: st117Rect.minX, y: st117Rect.minY + (st117Rect.height - st117TextHeight) / 2, width: st117Rect.width, height: st117TextHeight), withAttributes: st117FontAttributes)
        context.restoreGState()


        //// st118 Drawing
        let st118Rect = CGRect(x: 392, y: 251, width: 149, height: 21)
        let st118TextContent = "Ploshcha Yakuba Kolasa"
        let st118Style = NSMutableParagraphStyle()
        st118Style.alignment = .left
        let st118FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st118Style,
        ] as [NSAttributedString.Key: Any]

        let st118TextHeight: CGFloat = st118TextContent.boundingRect(with: CGSize(width: st118Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st118FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st118Rect)
        st118TextContent.draw(in: CGRect(x: st118Rect.minX, y: st118Rect.minY + (st118Rect.height - st118TextHeight) / 2, width: st118Rect.width, height: st118TextHeight), withAttributes: st118FontAttributes)
        context.restoreGState()


        //// st119 Drawing
        let st119Rect = CGRect(x: 432, y: 210, width: 120, height: 21)
        let st119TextContent = "Akademija navuk"
        let st119Style = NSMutableParagraphStyle()
        st119Style.alignment = .left
        let st119FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st119Style,
        ] as [NSAttributedString.Key: Any]

        let st119TextHeight: CGFloat = st119TextContent.boundingRect(with: CGSize(width: st119Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st119FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st119Rect)
        st119TextContent.draw(in: CGRect(x: st119Rect.minX, y: st119Rect.minY + (st119Rect.height - st119TextHeight) / 2, width: st119Rect.width, height: st119TextHeight), withAttributes: st119FontAttributes)
        context.restoreGState()


        //// st120 Drawing
        let st120Rect = CGRect(x: 333, y: 163, width: 120, height: 21)
        let st120TextContent = "Park Chaluskincaw"
        let st120Style = NSMutableParagraphStyle()
        st120Style.alignment = .right
        let st120FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st120Style,
        ] as [NSAttributedString.Key: Any]

        let st120TextHeight: CGFloat = st120TextContent.boundingRect(with: CGSize(width: st120Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st120FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st120Rect)
        st120TextContent.draw(in: CGRect(x: st120Rect.minX, y: st120Rect.minY + (st120Rect.height - st120TextHeight) / 2, width: st120Rect.width, height: st120TextHeight), withAttributes: st120FontAttributes)
        context.restoreGState()


        //// st121 Drawing
        let st121Rect = CGRect(x: 373, y: 123, width: 120, height: 21)
        let st121TextContent = "Maskowskaja"
        let st121Style = NSMutableParagraphStyle()
        st121Style.alignment = .right
        let st121FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st121Style,
        ] as [NSAttributedString.Key: Any]

        let st121TextHeight: CGFloat = st121TextContent.boundingRect(with: CGSize(width: st121Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st121FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st121Rect)
        st121TextContent.draw(in: CGRect(x: st121Rect.minX, y: st121Rect.minY + (st121Rect.height - st121TextHeight) / 2, width: st121Rect.width, height: st121TextHeight), withAttributes: st121FontAttributes)
        context.restoreGState()


        //// st122 Drawing
        let st122Rect = CGRect(x: 413, y: 83, width: 120, height: 21)
        let st122TextContent = "Uschod"
        let st122Style = NSMutableParagraphStyle()
        st122Style.alignment = .right
        let st122FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st122Style,
        ] as [NSAttributedString.Key: Any]

        let st122TextHeight: CGFloat = st122TextContent.boundingRect(with: CGSize(width: st122Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st122FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st122Rect)
        st122TextContent.draw(in: CGRect(x: st122Rect.minX, y: st122Rect.minY + (st122Rect.height - st122TextHeight) / 2, width: st122Rect.width, height: st122TextHeight), withAttributes: st122FontAttributes)
        context.restoreGState()


        //// st123 Drawing
        let st123Rect = CGRect(x: 453, y: 43, width: 120, height: 21)
        let st123TextContent = "Barysawski Trakt"
        let st123Style = NSMutableParagraphStyle()
        st123Style.alignment = .right
        let st123FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st123Style,
        ] as [NSAttributedString.Key: Any]

        let st123TextHeight: CGFloat = st123TextContent.boundingRect(with: CGSize(width: st123Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st123FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st123Rect)
        st123TextContent.draw(in: CGRect(x: st123Rect.minX, y: st123Rect.minY + (st123Rect.height - st123TextHeight) / 2, width: st123Rect.width, height: st123TextHeight), withAttributes: st123FontAttributes)
        context.restoreGState()


        //// st124 Drawing
        let st124Rect = CGRect(x: 495, y: 0, width: 120, height: 21)
        let st124TextContent = "Uruchcha"
        let st124Style = NSMutableParagraphStyle()
        st124Style.alignment = .right
        let st124FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st124Style,
        ] as [NSAttributedString.Key: Any]

        let st124TextHeight: CGFloat = st124TextContent.boundingRect(with: CGSize(width: st124Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st124FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st124Rect)
        st124TextContent.draw(in: CGRect(x: st124Rect.minX, y: st124Rect.minY + (st124Rect.height - st124TextHeight) / 2, width: st124Rect.width, height: st124TextHeight), withAttributes: st124FontAttributes)
        context.restoreGState()


        //// r13 Drawing
        let r13Path = UIBezierPath()
        r13Path.move(to: CGPoint(x: 490, y: 550))
        r13Path.addCurve(to: CGPoint(x: 530, y: 590), controlPoint1: CGPoint(x: 530, y: 590), controlPoint2: CGPoint(x: 530, y: 590))
        r13Path.addLine(to: CGPoint(x: 530, y: 590))
        r13Path.addLine(to: CGPoint(x: 530, y: 590))
        StyleKit.metroRed.setStroke()
        r13Path.lineWidth = 5
        r13Path.stroke()


        //// r12 Drawing
        let r12Path = UIBezierPath()
        r12Path.move(to: CGPoint(x: 450, y: 510))
        r12Path.addCurve(to: CGPoint(x: 490, y: 550), controlPoint1: CGPoint(x: 490, y: 550), controlPoint2: CGPoint(x: 490, y: 550))
        r12Path.addLine(to: CGPoint(x: 490, y: 550))
        r12Path.addLine(to: CGPoint(x: 490, y: 550))
        StyleKit.metroRed.setStroke()
        r12Path.lineWidth = 5
        r12Path.stroke()


        //// r11 Drawing
        let r11Path = UIBezierPath()
        r11Path.move(to: CGPoint(x: 410, y: 470))
        r11Path.addCurve(to: CGPoint(x: 450, y: 510), controlPoint1: CGPoint(x: 450, y: 510), controlPoint2: CGPoint(x: 450, y: 510))
        r11Path.addLine(to: CGPoint(x: 450, y: 510))
        r11Path.addLine(to: CGPoint(x: 450, y: 510))
        StyleKit.metroRed.setStroke()
        r11Path.lineWidth = 5
        r11Path.stroke()


        //// r10 Drawing
        let r10Path = UIBezierPath()
        r10Path.move(to: CGPoint(x: 370, y: 430))
        r10Path.addCurve(to: CGPoint(x: 410, y: 470), controlPoint1: CGPoint(x: 410, y: 470), controlPoint2: CGPoint(x: 410, y: 470))
        r10Path.addLine(to: CGPoint(x: 410, y: 470))
        r10Path.addLine(to: CGPoint(x: 410, y: 470))
        StyleKit.metroRed.setStroke()
        r10Path.lineWidth = 5
        r10Path.stroke()


        //// r9 Drawing
        let r9Path = UIBezierPath()
        r9Path.move(to: CGPoint(x: 330, y: 390))
        r9Path.addCurve(to: CGPoint(x: 370, y: 430), controlPoint1: CGPoint(x: 370, y: 430), controlPoint2: CGPoint(x: 370, y: 430))
        r9Path.addLine(to: CGPoint(x: 370, y: 430))
        r9Path.addLine(to: CGPoint(x: 370, y: 430))
        StyleKit.metroRed.setStroke()
        r9Path.lineWidth = 5
        r9Path.stroke()


        //// r8 Drawing
        let r8Path = UIBezierPath()
        r8Path.move(to: CGPoint(x: 290, y: 350))
        r8Path.addCurve(to: CGPoint(x: 330, y: 390), controlPoint1: CGPoint(x: 330, y: 390), controlPoint2: CGPoint(x: 330, y: 390))
        r8Path.addLine(to: CGPoint(x: 330, y: 390))
        r8Path.addLine(to: CGPoint(x: 330, y: 390))
        StyleKit.metroRed.setStroke()
        r8Path.lineWidth = 5
        r8Path.stroke()


        //// r7 Drawing
        let r7Path = UIBezierPath()
        r7Path.move(to: CGPoint(x: 250, y: 310))
        r7Path.addCurve(to: CGPoint(x: 290, y: 350), controlPoint1: CGPoint(x: 290, y: 350), controlPoint2: CGPoint(x: 290, y: 350))
        r7Path.addLine(to: CGPoint(x: 290, y: 350))
        r7Path.addLine(to: CGPoint(x: 290, y: 350))
        StyleKit.metroRed.setStroke()
        r7Path.lineWidth = 5
        r7Path.stroke()


        //// r6 Drawing
        let r6Path = UIBezierPath()
        r6Path.move(to: CGPoint(x: 210, y: 270))
        r6Path.addCurve(to: CGPoint(x: 250, y: 310), controlPoint1: CGPoint(x: 250, y: 310), controlPoint2: CGPoint(x: 250, y: 310))
        r6Path.addLine(to: CGPoint(x: 250, y: 310))
        r6Path.addLine(to: CGPoint(x: 250, y: 310))
        StyleKit.metroRed.setStroke()
        r6Path.lineWidth = 5
        r6Path.stroke()


        //// r5 Drawing
        let r5Path = UIBezierPath()
        r5Path.move(to: CGPoint(x: 170, y: 230))
        r5Path.addCurve(to: CGPoint(x: 210, y: 270), controlPoint1: CGPoint(x: 210, y: 270), controlPoint2: CGPoint(x: 210, y: 270))
        r5Path.addLine(to: CGPoint(x: 210, y: 270))
        r5Path.addLine(to: CGPoint(x: 210, y: 270))
        StyleKit.metroRed.setStroke()
        r5Path.lineWidth = 5
        r5Path.stroke()


        //// r4 Drawing
        let r4Path = UIBezierPath()
        r4Path.move(to: CGPoint(x: 130, y: 190))
        r4Path.addCurve(to: CGPoint(x: 170, y: 230), controlPoint1: CGPoint(x: 170, y: 230), controlPoint2: CGPoint(x: 170, y: 230))
        r4Path.addLine(to: CGPoint(x: 170, y: 230))
        r4Path.addLine(to: CGPoint(x: 170, y: 230))
        StyleKit.metroRed.setStroke()
        r4Path.lineWidth = 5
        r4Path.stroke()


        //// r3 Drawing
        let r3Path = UIBezierPath()
        r3Path.move(to: CGPoint(x: 90, y: 150))
        r3Path.addCurve(to: CGPoint(x: 130, y: 190), controlPoint1: CGPoint(x: 130, y: 190), controlPoint2: CGPoint(x: 130, y: 190))
        r3Path.addLine(to: CGPoint(x: 130, y: 190))
        r3Path.addLine(to: CGPoint(x: 130, y: 190))
        StyleKit.metroRed.setStroke()
        r3Path.lineWidth = 5
        r3Path.stroke()


        //// r2 Drawing
        let r2Path = UIBezierPath()
        r2Path.move(to: CGPoint(x: 50, y: 110))
        r2Path.addCurve(to: CGPoint(x: 90, y: 150), controlPoint1: CGPoint(x: 90, y: 150), controlPoint2: CGPoint(x: 90, y: 150))
        r2Path.addLine(to: CGPoint(x: 90, y: 150))
        r2Path.addLine(to: CGPoint(x: 90, y: 150))
        StyleKit.metroRed.setStroke()
        r2Path.lineWidth = 5
        r2Path.stroke()


        //// r1 Drawing
        let r1Path = UIBezierPath()
        r1Path.move(to: CGPoint(x: 10, y: 70))
        r1Path.addCurve(to: CGPoint(x: 50, y: 110), controlPoint1: CGPoint(x: 50, y: 110), controlPoint2: CGPoint(x: 50, y: 110))
        r1Path.addLine(to: CGPoint(x: 50, y: 110))
        r1Path.addLine(to: CGPoint(x: 50, y: 110))
        StyleKit.metroRed.setStroke()
        r1Path.lineWidth = 5
        r1Path.stroke()


        //// o211 Drawing
        let o211Path = UIBezierPath(ovalIn: CGRect(x: 488, y: 548, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o211Path.fill()


        //// o212 Drawing
        let o212Path = UIBezierPath(ovalIn: CGRect(x: 448, y: 508, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o212Path.fill()


        //// o213 Drawing
        let o213Path = UIBezierPath(ovalIn: CGRect(x: 408, y: 468, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o213Path.fill()


        //// o214 Drawing
        let o214Path = UIBezierPath(ovalIn: CGRect(x: 368, y: 428, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o214Path.fill()


        //// o215 Drawing
        let o215Path = UIBezierPath(ovalIn: CGRect(x: 328, y: 388, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o215Path.fill()


        //// o217 Drawing
        let o217Path = UIBezierPath(ovalIn: CGRect(x: 248, y: 308, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o217Path.fill()


        //// o219 Drawing
        let o219Path = UIBezierPath(ovalIn: CGRect(x: 168, y: 228, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o219Path.fill()


        //// o220 Drawing
        let o220Path = UIBezierPath(ovalIn: CGRect(x: 128, y: 188, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o220Path.fill()


        //// o221 Drawing
        let o221Path = UIBezierPath(ovalIn: CGRect(x: 88, y: 148, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o221Path.fill()


        //// o222 Drawing
        let o222Path = UIBezierPath(ovalIn: CGRect(x: 48, y: 108, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o222Path.fill()


        //// b14 Drawing
        let b14Path = UIBezierPath()
        b14Path.move(to: CGPoint(x: 77, y: 563))
        b14Path.addLine(to: CGPoint(x: 37, y: 603))
        StyleKit.metroBlue.setStroke()
        b14Path.lineWidth = 5
        b14Path.stroke()


        //// b13 Drawing
        let b13Path = UIBezierPath()
        b13Path.move(to: CGPoint(x: 117, y: 523))
        b13Path.addLine(to: CGPoint(x: 77, y: 563))
        StyleKit.metroBlue.setStroke()
        b13Path.lineWidth = 5
        b13Path.stroke()


        //// b12 Drawing
        let b12Path = UIBezierPath()
        b12Path.move(to: CGPoint(x: 157, y: 483))
        b12Path.addLine(to: CGPoint(x: 117, y: 523))
        StyleKit.metroBlue.setStroke()
        b12Path.lineWidth = 5
        b12Path.stroke()


        //// b11 Drawing
        let b11Path = UIBezierPath()
        b11Path.move(to: CGPoint(x: 197, y: 443))
        b11Path.addLine(to: CGPoint(x: 157, y: 483))
        StyleKit.metroBlue.setStroke()
        b11Path.lineWidth = 5
        b11Path.stroke()


        //// b10 Drawing
        let b10Path = UIBezierPath()
        b10Path.move(to: CGPoint(x: 237, y: 403))
        b10Path.addLine(to: CGPoint(x: 197, y: 443))
        StyleKit.metroBlue.setStroke()
        b10Path.lineWidth = 5
        b10Path.stroke()


        //// b9 Drawing
        let b9Path = UIBezierPath()
        b9Path.move(to: CGPoint(x: 290, y: 350))
        b9Path.addLine(to: CGPoint(x: 250, y: 390))
        StyleKit.metroBlue.setStroke()
        b9Path.lineWidth = 5
        b9Path.stroke()


        //// b8 Drawing
        let b8Path = UIBezierPath()
        b8Path.move(to: CGPoint(x: 345, y: 295))
        b8Path.addLine(to: CGPoint(x: 305, y: 335))
        StyleKit.metroBlue.setStroke()
        b8Path.lineWidth = 5
        b8Path.stroke()


        //// b7 Drawing
        let b7Path = UIBezierPath()
        b7Path.move(to: CGPoint(x: 385, y: 255))
        b7Path.addLine(to: CGPoint(x: 345, y: 295))
        StyleKit.metroBlue.setStroke()
        b7Path.lineWidth = 5
        b7Path.stroke()


        //// b6 Drawing
        let b6Path = UIBezierPath()
        b6Path.move(to: CGPoint(x: 425, y: 215))
        b6Path.addLine(to: CGPoint(x: 385, y: 255))
        StyleKit.metroBlue.setStroke()
        b6Path.lineWidth = 5
        b6Path.stroke()


        //// b5 Drawing
        let b5Path = UIBezierPath()
        b5Path.move(to: CGPoint(x: 465, y: 175))
        b5Path.addLine(to: CGPoint(x: 425, y: 215))
        StyleKit.metroBlue.setStroke()
        b5Path.lineWidth = 5
        b5Path.stroke()


        //// b4 Drawing
        let b4Path = UIBezierPath()
        b4Path.move(to: CGPoint(x: 505, y: 135))
        b4Path.addLine(to: CGPoint(x: 465, y: 175))
        StyleKit.metroBlue.setStroke()
        b4Path.lineWidth = 5
        b4Path.stroke()


        //// b3 Drawing
        let b3Path = UIBezierPath()
        b3Path.move(to: CGPoint(x: 545, y: 95))
        b3Path.addLine(to: CGPoint(x: 505, y: 135))
        StyleKit.metroBlue.setStroke()
        b3Path.lineWidth = 5
        b3Path.stroke()


        //// b2 Drawing
        let b2Path = UIBezierPath()
        b2Path.move(to: CGPoint(x: 585, y: 55))
        b2Path.addLine(to: CGPoint(x: 545, y: 95))
        StyleKit.metroBlue.setStroke()
        b2Path.lineWidth = 5
        b2Path.stroke()


        //// b1 Drawing
        let b1Path = UIBezierPath()
        b1Path.move(to: CGPoint(x: 625, y: 15))
        b1Path.addLine(to: CGPoint(x: 585, y: 55))
        StyleKit.metroBlue.setStroke()
        b1Path.lineWidth = 5
        b1Path.stroke()


        //// o123 Drawing
        let o123Path = UIBezierPath(ovalIn: CGRect(x: 583, y: 53, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o123Path.fill()


        //// o122 Drawing
        let o122Path = UIBezierPath(ovalIn: CGRect(x: 543, y: 93, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o122Path.fill()


        //// o121 Drawing
        let o121Path = UIBezierPath(ovalIn: CGRect(x: 503, y: 133, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o121Path.fill()


        //// o120 Drawing
        let o120Path = UIBezierPath(ovalIn: CGRect(x: 463, y: 173, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o120Path.fill()


        //// o119 Drawing
        let o119Path = UIBezierPath(ovalIn: CGRect(x: 423, y: 213, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o119Path.fill()


        //// o118 Drawing
        let o118Path = UIBezierPath(ovalIn: CGRect(x: 383, y: 253, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o118Path.fill()


        //// o117 Drawing
        let o117Path = UIBezierPath(ovalIn: CGRect(x: 343, y: 293, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o117Path.fill()


        //// o114 Drawing
        let o114Path = UIBezierPath(ovalIn: CGRect(x: 195, y: 441, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o114Path.fill()


        //// o113 Drawing
        let o113Path = UIBezierPath(ovalIn: CGRect(x: 155, y: 481, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o113Path.fill()


        //// o112 Drawing
        let o112Path = UIBezierPath(ovalIn: CGRect(x: 115, y: 521, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o112Path.fill()


        //// o111 Drawing
        let o111Path = UIBezierPath(ovalIn: CGRect(x: 75, y: 561, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o111Path.fill()


        //// g3 Drawing
        let g3Path = UIBezierPath()
        g3Path.move(to: CGPoint(x: 237.5, y: 403.5))
        g3Path.addCurve(to: CGPoint(x: 259.5, y: 442.5), controlPoint1: CGPoint(x: 237.5, y: 403.5), controlPoint2: CGPoint(x: 251.5, y: 421.5))
        g3Path.addCurve(to: CGPoint(x: 267.5, y: 482.5), controlPoint1: CGPoint(x: 267.5, y: 463.5), controlPoint2: CGPoint(x: 267.5, y: 482.5))
        StyleKit.metroGreen.setStroke()
        g3Path.lineWidth = 5
        g3Path.stroke()


        //// g2 Drawing
        let g2Path = UIBezierPath()
        g2Path.move(to: CGPoint(x: 210, y: 329.5))
        g2Path.addCurve(to: CGPoint(x: 215.5, y: 369.5), controlPoint1: CGPoint(x: 210, y: 329.5), controlPoint2: CGPoint(x: 209.5, y: 351.25))
        g2Path.addCurve(to: CGPoint(x: 237, y: 403.5), controlPoint1: CGPoint(x: 221.5, y: 387.75), controlPoint2: CGPoint(x: 237, y: 403.5))
        StyleKit.metroGreen.setStroke()
        g2Path.lineWidth = 5
        g2Path.stroke()


        //// g1 Drawing
        let g1Path = UIBezierPath()
        g1Path.move(to: CGPoint(x: 210, y: 287))
        g1Path.addLine(to: CGPoint(x: 210, y: 330))
        StyleKit.metroGreen.setStroke()
        g1Path.lineWidth = 5
        g1Path.stroke()


        //// o315 Drawing
        let o315Path = UIBezierPath(ovalIn: CGRect(x: 208, y: 328, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o315Path.fill()


        //// st216 Drawing
        let st216Rect = CGRect(x: 169, y: 339, width: 108, height: 21)
        let st216TextContent = "Kupalawskaja"
        let st216Style = NSMutableParagraphStyle()
        st216Style.alignment = .right
        let st216FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st216Style,
        ] as [NSAttributedString.Key: Any]

        let st216TextHeight: CGFloat = st216TextContent.boundingRect(with: CGSize(width: st216Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st216FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st216Rect)
        st216TextContent.draw(in: CGRect(x: st216Rect.minX, y: st216Rect.minY + (st216Rect.height - st216TextHeight) / 2, width: st216Rect.width, height: st216TextHeight), withAttributes: st216FontAttributes)
        context.restoreGState()


        //// st115 Drawing
        let st115Rect = CGRect(x: 67, y: 379, width: 166, height: 21)
        let st115TextContent = "Ploshcha Lenina"
        let st115Style = NSMutableParagraphStyle()
        st115Style.alignment = .right
        let st115FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st115Style,
        ] as [NSAttributedString.Key: Any]

        let st115TextHeight: CGFloat = st115TextContent.boundingRect(with: CGSize(width: st115Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st115FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st115Rect)
        st115TextContent.draw(in: CGRect(x: st115Rect.minX, y: st115Rect.minY + (st115Rect.height - st115TextHeight) / 2, width: st115Rect.width, height: st115TextHeight), withAttributes: st115FontAttributes)
        context.restoreGState()


        //// tr_2_3 Drawing
        let tr_2_3Path = UIBezierPath(rect: CGRect(x: 204, y: 270, width: 12, height: 18))
        StyleKit.metroGrey.setFill()
        tr_2_3Path.fill()


        //// tr_1_3 Drawing
        context.saveGState()
        context.translateBy(x: 246, y: 385.5)
        context.rotate(by: 45 * CGFloat.pi/180)

        let tr_1_3Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 12.02, height: 18.38))
        StyleKit.metroGrey.setFill()
        tr_1_3Path.fill()

        context.restoreGState()


        //// tr_1_2 Drawing
        context.saveGState()
        context.translateBy(x: 298.73, y: 332.79)
        context.rotate(by: 45 * CGFloat.pi/180)

        let tr_1_2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 12, height: 18.42))
        StyleKit.metroGrey.setFill()
        tr_1_2Path.fill()

        context.restoreGState()


        //// c218 Drawing
        let c218Path = UIBezierPath(ovalIn: CGRect(x: 204, y: 264, width: 12, height: 12))
        StyleKit.metroRed.setFill()
        c218Path.fill()


        //// o218 Drawing
        let o218Path = UIBezierPath(ovalIn: CGRect(x: 208, y: 268, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o218Path.fill()


        //// c316 Drawing
        let c316Path = UIBezierPath(ovalIn: CGRect(x: 204, y: 282, width: 12, height: 12))
        StyleKit.metroGreen.setFill()
        c316Path.fill()


        //// o316 Drawing
        let o316Path = UIBezierPath(ovalIn: CGRect(x: 208, y: 286, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o316Path.fill()


        //// c116 Drawing
        let c116Path = UIBezierPath(ovalIn: CGRect(x: 297, y: 331, width: 12, height: 12))
        StyleKit.metroBlue.setFill()
        c116Path.fill()


        //// o116 Drawing
        let o116Path = UIBezierPath(ovalIn: CGRect(x: 301, y: 335, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o116Path.fill()


        //// c216 Drawing
        let c216Path = UIBezierPath(ovalIn: CGRect(x: 284, y: 344, width: 12, height: 12))
        StyleKit.metroRed.setFill()
        c216Path.fill()


        //// o216 Drawing
        let o216Path = UIBezierPath(ovalIn: CGRect(x: 288, y: 348, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o216Path.fill()


        //// c115 Drawing
        let c115Path = UIBezierPath(ovalIn: CGRect(x: 244, y: 384, width: 12, height: 12))
        StyleKit.metroBlue.setFill()
        c115Path.fill()


        //// o115 Drawing
        let o115Path = UIBezierPath(ovalIn: CGRect(x: 248, y: 388, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o115Path.fill()


        //// c314 Drawing
        let c314Path = UIBezierPath(ovalIn: CGRect(x: 231, y: 397, width: 12, height: 12))
        StyleKit.metroGreen.setFill()
        c314Path.fill()


        //// o314 Drawing
        let o314Path = UIBezierPath(ovalIn: CGRect(x: 235, y: 401, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o314Path.fill()


        //// c223 Drawing
        let c223Path = UIBezierPath(ovalIn: CGRect(x: 7.5, y: 67.5, width: 5, height: 5))
        StyleKit.metroRed.setFill()
        c223Path.fill()


        //// c210 Drawing
        let c210Path = UIBezierPath(ovalIn: CGRect(x: 527.5, y: 587.5, width: 5, height: 5))
        StyleKit.metroRed.setFill()
        c210Path.fill()


        //// c124 Drawing
        let c124Path = UIBezierPath(ovalIn: CGRect(x: 622.5, y: 12.5, width: 5, height: 5))
        StyleKit.metroBlue.setFill()
        c124Path.fill()


        //// c110 Drawing
        let c110Path = UIBezierPath(ovalIn: CGRect(x: 34.5, y: 600.5, width: 5, height: 5))
        StyleKit.metroBlue.setFill()
        c110Path.fill()


        //// c313 Drawing
        let c313Path = UIBezierPath(ovalIn: CGRect(x: 265, y: 615, width: 5, height: 5))
        StyleKit.metroGreen.setFill()
        c313Path.fill()


        //// b Drawing
        let bPath = UIBezierPath()
        bPath.move(to: CGPoint(x: 267.5, y: 482.5))
        bPath.addLine(to: CGPoint(x: 267.5, y: 527.5))
        StyleKit.metroGreen.setStroke()
        bPath.lineWidth = 5
        bPath.stroke()


        //// b 15 Drawing
        let b15Path = UIBezierPath()
        b15Path.move(to: CGPoint(x: 267.5, y: 527.5))
        b15Path.addLine(to: CGPoint(x: 267.5, y: 572.5))
        StyleKit.metroGreen.setStroke()
        b15Path.lineWidth = 5
        b15Path.stroke()


        //// b 16 Drawing
        let b16Path = UIBezierPath()
        b16Path.move(to: CGPoint(x: 267.5, y: 572.5))
        b16Path.addLine(to: CGPoint(x: 267.5, y: 617.5))
        StyleKit.metroGreen.setStroke()
        b16Path.lineWidth = 5
        b16Path.stroke()


        //// o Drawing
        let oPath = UIBezierPath(ovalIn: CGRect(x: 265.5, y: 480, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        oPath.fill()


        //// o 2 Drawing
        let o2Path = UIBezierPath(ovalIn: CGRect(x: 265.5, y: 525, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o2Path.fill()


        //// o 3 Drawing
        let o3Path = UIBezierPath(ovalIn: CGRect(x: 265.5, y: 570, width: 4, height: 4))
        StyleKit.metroWhite.setFill()
        o3Path.fill()


        //// st Drawing
        let stRect = CGRect(x: 277, y: 516, width: 85, height: 21)
        let stTextContent = "Aeradromnaja"
        let stStyle = NSMutableParagraphStyle()
        stStyle.alignment = .left
        let stFontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: stStyle,
        ] as [NSAttributedString.Key: Any]

        let stTextHeight: CGFloat = stTextContent.boundingRect(with: CGSize(width: stRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: stFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: stRect)
        stTextContent.draw(in: CGRect(x: stRect.minX, y: stRect.minY + (stRect.height - stTextHeight) / 2, width: stRect.width, height: stTextHeight), withAttributes: stFontAttributes)
        context.restoreGState()


        //// st 2 Drawing
        let st2Rect = CGRect(x: 277, y: 557, width: 91, height: 30)
        let st2TextContent = "Nemarshanski Sad"
        let st2Style = NSMutableParagraphStyle()
        st2Style.alignment = .left
        let st2FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st2Style,
        ] as [NSAttributedString.Key: Any]

        let st2TextHeight: CGFloat = st2TextContent.boundingRect(with: CGSize(width: st2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st2Rect)
        st2TextContent.draw(in: CGRect(x: st2Rect.minX, y: st2Rect.minY + (st2Rect.height - st2TextHeight) / 2, width: st2Rect.width, height: st2TextHeight), withAttributes: st2FontAttributes)
        context.restoreGState()


        //// st 3 Drawing
        let st3Rect = CGRect(x: 274, y: 602, width: 105, height: 30)
        let st3TextContent = "Slucki Hascienec"
        let st3Style = NSMutableParagraphStyle()
        st3Style.alignment = .left
        let st3FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: st3Style,
        ] as [NSAttributedString.Key: Any]

        let st3TextHeight: CGFloat = st3TextContent.boundingRect(with: CGSize(width: st3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: st3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: st3Rect)
        st3TextContent.draw(in: CGRect(x: st3Rect.minX, y: st3Rect.minY + (st3Rect.height - st3TextHeight) / 2, width: st3Rect.width, height: st3TextHeight), withAttributes: st3FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCanvas2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 240, height: 120), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 240, height: 120), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 240, y: resizedFrame.height / 120)
        
        context.restoreGState()

    }




    @objc(StyleKit25decResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}

